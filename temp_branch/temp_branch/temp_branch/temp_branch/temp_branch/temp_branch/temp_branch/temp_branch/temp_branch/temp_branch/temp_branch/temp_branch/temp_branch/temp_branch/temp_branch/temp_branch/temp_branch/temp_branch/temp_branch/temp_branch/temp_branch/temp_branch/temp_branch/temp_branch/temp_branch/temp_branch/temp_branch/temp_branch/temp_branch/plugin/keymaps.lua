local _local_1_ = require("user.utils")
local run = _local_1_["run"]
local nvim_dir = vim.fn.stdpath("config")
local function open_in_explorer(dir)
  return (":Ex " .. dir .. "<cr>")
end
vim.keymap.set("t", "<Esc><Esc>", "<C-\\><C-n>", {noremap = true})
vim.api.nvim_create_autocmd("TermOpen", {pattern = "*", command = "startinsert"})
vim.api.nvim_create_autocmd("BufEnter", {pattern = "term://*", command = "startinsert"})
vim.keymap.set("n", "<C-Enter>", vim.lsp.buf.code_action, {noremap = true})
vim.keymap.set("n", "<Enter>", "m`o<Esc>k``", {noremap = true})
vim.keymap.set("n", "<S-Enter>", "i<Enter><Esc>k$", {noremap = true})
vim.keymap.set("n", "<C-h>", "<cmd>wincmd h<cr>", {silent = true})
vim.keymap.set("n", "<C-j>", "<cmd>wincmd j<cr>", {silent = true})
vim.keymap.set("n", "<C-k>", "<cmd>wincmd k<cr>", {silent = true})
vim.keymap.set("n", "<C-l>", "<cmd>wincmd l<cr>", {silent = true})
vim.keymap.set("t", "<C-h>", "<cmd>wincmd h<cr>", {silent = true})
vim.keymap.set("t", "<C-j>", "<cmd>wincmd j<cr>", {silent = true})
vim.keymap.set("t", "<C-k>", "<cmd>wincmd k<cr>", {silent = true})
vim.keymap.set("n", "<C-s>", ":w<cr>")
vim.keymap.set("n", "<C-w>", ":q<cr>")
vim.keymap.set("n", "<C-q>", ":bd!<cr>")
local function _2_()
  return vim.api.nvim_command("q")
end
vim.keymap.set("t", "<C-w>", _2_)
local function _3_()
  return vim.api.nvim_command("bd!")
end
vim.keymap.set("t", "<C-q>", _3_)
vim.keymap.set("n", "<C-->", "<C-^>")
local function _4_()
  return vim.api.nvim_command("buffer #")
end
vim.keymap.set("t", "<C-->", _4_)
vim.keymap.set("n", "<C-Tab>", "<C-^>")
local function _5_()
  return vim.api.nvim_command("buffer #")
end
vim.keymap.set("t", "<C-Tab>", _5_)
local function _6_()
  return vim.api.nvim_command(":bp")
end
vim.keymap.set({"n", "t"}, "<C-S-H>", _6_)
local function _7_()
  return vim.api.nvim_command(":bn")
end
vim.keymap.set({"n", "t"}, "<C-S-L>", _7_)
local function _8_()
  return vim.api.nvim_command(":tabnext")
end
vim.keymap.set({"n", "t"}, "<C-S-K>", _8_)
local function _9_()
  return vim.api.nvim_command(":tabprev")
end
vim.keymap.set({"n", "t"}, "<C-S-J>", _9_)
vim.keymap.set({"n", "x", "o"}, "<leader>jf", "<Plug>(leap-forward)")
vim.keymap.set({"n", "x", "o"}, "<leader>jF", "<Plug>(leap-backward)")
do
  local map_set_leader
  local function _10_(lhs, rhs)
    return vim.keymap.set({"n", "v"}, ("<leader>" .. lhs), rhs, {noremap = true})
  end
  map_set_leader = _10_
  map_set_leader("wo", ":only<cr>")
  map_set_leader("bs", ":enew<cr>")
  map_set_leader("fed", open_in_explorer(nvim_dir))
  map_set_leader("se", vim.lsp.buf.rename)
  map_set_leader("cs", ":nohlsearch<cr>")
  map_set_leader("ef", open_in_explorer(""))
  map_set_leader("gs", ":Neogit<cr>")
  map_set_leader("gc", ":Neogit commit<cr>")
  map_set_leader("ac", vim.cmd.terminal)
  local function _11_()
    return vim.cmd.terminal("powershell.exe")
  end
  map_set_leader("ap", _11_)
  local function _12_()
    return vim.cmd.terminal("wsl.exe zsh")
  end
  map_set_leader("al", _12_)
  local function _13_()
    return vim.cmd.terminal("wsl.exe bash")
  end
  map_set_leader("ab", _13_)
  map_set_leader("wr", vim.cmd.WinResizerStartResize)
  map_set_leader("wD", ":q!<cr>")
  local function _14_()
    return run((require("mini.starter")).open)
  end
  map_set_leader("bh", _14_)
  map_set_leader("bD", ":bd!<cr>")
  local function _15_()
    vim.cmd.tabnew()
    return run((require("mini.starter")).open)
  end
  map_set_leader("lh", _15_)
  map_set_leader("ln", vim.cmd.tabnext)
  map_set_leader("lp", vim.cmd.tabprev)
  map_set_leader("lc", vim.cmd.tabclose)
  local function _16_()
    local buffer_name = vim.api.nvim_buf_get_name(vim.api.nvim_get_current_buf())
    local cursor_position = vim.api.nvim_win_get_cursor(0)
    vim.cmd.tabedit(buffer_name)
    return vim.api.nvim_win_set_cursor(0, cursor_position)
  end
  map_set_leader("lo", _16_)
  local function _17_()
    return vim.cmd.tabmove("-1")
  end
  map_set_leader("l<", _17_)
  local function _18_()
    return vim.cmd.tabmove("+1")
  end
  map_set_leader("l>", _18_)
  local function _19_()
    vim.cmd(("cd " .. nvim_dir))
    vim.cmd.terminal("make")
    local function _20_()
      return vim.cmd("qa!")
    end
    return vim.api.nvim_create_autocmd("TermClose", {pattern = "term://*make", callback = _20_})
  end
  map_set_leader("qr", _19_)
  local builtin = require("telescope.builtin")
  map_set_leader("sh", builtin.help_tags, {desc = "[S]earch [H]elp"})
  map_set_leader("sk", builtin.keymaps, {desc = "[S]earch [K]eymaps"})
  map_set_leader("sf", (require("user.telescope-config"))["find-files"], {desc = "[S]earch [F]iles"})
  map_set_leader("ss", builtin.builtin, {desc = "[S]earch [S]elect Telescope"})
  map_set_leader("sw", builtin.grep_string, {desc = "[S]earch current [W]ord"})
  map_set_leader("sg", (require("user.telescope-config"))["live-grep"], {desc = "[S]earch by [G]rep"})
  map_set_leader("sd", builtin.diagnostics, {desc = "[S]earch [D]iagnostics"})
  map_set_leader("sr", builtin.resume, {desc = "[S]earch [R]esume"})
  map_set_leader("s.", builtin.oldfiles, {desc = "[S]earch Recent Files ('.' for repeat)"})
  map_set_leader("sb", builtin.buffers, {desc = "[S]earch [B]uffers (existing)"})
  map_set_leader("sj", builtin.current_buffer_fuzzy_find, {desc = "[/] Fuzzily search in current buffer"})
  local function _21_()
    return builtin.live_grep({grep_open_files = true, prompt_title = "Live Grep in Open Files"})
  end
  map_set_leader("s/", _21_, {desc = "[S]earch [/] in Open Files"})
  local function _22_()
    return builtin.find_files({cwd = vim.fn.stdpath("config")})
  end
  map_set_leader("sn", _22_, {desc = "[S]earch [N]eovim files"})
  map_set_leader("st", ":TodoTelescope<cr>", {desc = "[S]earch [T]odos"})
  map_set_leader("sm", builtin.marks, {desc = "[S]earch [M]arks"})
  map_set_leader("sq", builtin.quickfix, {desc = "[S]earch [Q]quickfix list"})
  map_set_leader("sc", builtin.git_commits, {desc = "[S]earch [C]ommits (git)"})
  vim.keymap.set("n", "gd", builtin.lsp_definitions, {desc = "[G]oto [D]efinition", noremap = true})
  vim.keymap.set("n", "gr", builtin.lsp_references, {desc = "[G]oto [R]eferences", noremap = true})
  vim.keymap.set("n", "gi", builtin.lsp_implementations, {desc = "[G]oto [I]mplementations", noremap = true})
  vim.keymap.set("n", "go", builtin.lsp_type_definitions, {desc = "[G]oto Type Definitions", noremap = true})
  local fzf_lua = require("fzf-lua")
  map_set_leader("zh", fzf_lua.help_tags, {desc = "[Z]earch [Help]"})
  map_set_leader("zk", fzf_lua.keymaps, {desc = "[Z]earch [K]eymaps"})
  map_set_leader("zf", fzf_lua.files, {desc = "[Z]earch [F]iles"})
  map_set_leader("zz", fzf_lua.builtin, {desc = "[Z]earch F[Z]F-lua builtins"})
  map_set_leader("zw", fzf_lua.grep_cword, {desc = "[Z]earch current [W]ord"})
  map_set_leader("zv", fzf_lua.grep_visual, {desc = "[Z]earch [V]isual selection"})
  map_set_leader("zg", fzf_lua.live_grep, {desc = "[Z]earch by [G]rep"})
  map_set_leader("zd", fzf_lua.diagnostics_workspace, {desc = "[Z]earch [D]iagnostics"})
  map_set_leader("zr", fzf_lua.resume, {desc = "[Z]earch [R]esume"})
  map_set_leader("z.", fzf_lua.oldfiles, {desc = "[Z]earch Recent Files ('.' for repeat)"})
  map_set_leader("zb", fzf_lua.buffers, {desc = "[Z]earch [B]uffers (existing)"})
  map_set_leader("zj", fzf_lua.blines, {desc = "[/] Fuzzily search in current buffer"})
  map_set_leader("z/", fzf_lua.lines, {desc = "[Z]earch [/] in Open Files"})
  local function _23_()
    return fzf_lua.files({cwd = vim.fn.stdpath("config")})
  end
  map_set_leader("zn", _23_, {desc = "[Z]earch [N]eovim files"})
  map_set_leader("zm", fzf_lua.marks, {desc = "[Z]earch [M]arks"})
  map_set_leader("zq", fzf_lua.quickfix, {desc = "[Z]earch [Q]quickfix list"})
  map_set_leader("zc", fzf_lua.git_commits, {desc = "[Z]earch [C]ommits (git)"})
end
vim.keymap.set("v", "p", "\"_dP", {noremap = true, silent = true})
vim.keymap.set("v", "d", "\"_d", {noremap = true, silent = true})
vim.keymap.set("v", "P", "p", {noremap = true, silent = true})
local function command_with_unchanged_unnamed_register(cmd)
  local function _24_()
    local old_unnamed = vim.fn.getreg("\"")
    vim.api.nvim_command(("normal! " .. cmd))
    return vim.fn.setreg("\"", old_unnamed)
  end
  return _24_
end
vim.keymap.set("n", "<leader>cy", "\"+y", {noremap = true, silent = true})
vim.keymap.set("n", "<leader>cp", "\"+p", {noremap = true, silent = true})
vim.keymap.set("n", "<leader>cd", "\"+d", {noremap = true, silent = true})
vim.keymap.set("n", "<leader>cY", "\"+Y", {noremap = true, silent = true})
vim.keymap.set("n", "<leader>cP", "\"+P", {noremap = true, silent = true})
vim.keymap.set("n", "<leader>cD", "\"+D", {noremap = true, silent = true})
vim.keymap.set("v", "<leader>cY", "\"+y", {noremap = true, silent = true})
vim.keymap.set("v", "<leader>cP", "\"+p", {noremap = true, silent = true})
vim.keymap.set("v", "<leader>cD", "\"+d", {noremap = true, silent = true})
vim.keymap.set("v", "<leader>cy", command_with_unchanged_unnamed_register("\"+y"), {noremap = true, silent = true})
vim.keymap.set("v", "<leader>cp", "\"_d\"+P", {noremap = true, silent = true})
vim.keymap.set("v", "<leader>cd", command_with_unchanged_unnamed_register("\"+d"), {noremap = true, silent = true})
vim.keymap.set("n", "[q", ":cprev<cr>", {noremap = true, silent = true})
vim.keymap.set("n", "]q", ":cnext<cr>", {noremap = true, silent = true})
vim.keymap.set("n", "[l", ":lprev<cr>", {noremap = true, silent = true})
vim.keymap.set("n", "]l", ":lnext<cr>", {noremap = true, silent = true})
vim.keymap.set("n", "[d", vim.diagnostic.goto_prev)
vim.keymap.set("n", "]d", vim.diagnostic.goto_next)
local function _25_()
  return (require("todo-comments")).jump_next()
end
vim.keymap.set("n", "]t", _25_)
local function _26_()
  return (require("todo-comments")).jump_prev()
end
return vim.keymap.set("n", "[t", _26_)
